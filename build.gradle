import groovy.time.TimeCategory
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'br.com.kbmg'
version = '0.0.2'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation('org.springframework.boot:spring-boot-starter-validation')
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
//	implementation 'org.liquibase:liquibase-core'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation "io.springfox:springfox-boot-starter:3.0.0"

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'

	// https://mvnrepository.com/artifact/org.mapstruct/mapstruct
	compileOnly group: 'org.mapstruct', name: 'mapstruct', version: '1.3.1.Final'
	testCompileOnly group: 'org.mapstruct', name: 'mapstruct', version: '1.3.1.Final'
	annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.3.1.Final'
	testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.3.1.Final'

	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
	// https://mvnrepository.com/artifact/org.passay/passay
	implementation group: 'org.passay', name: 'passay', version: '1.6.1'

}

tasks.register("unitTest", Test) {
	useJUnitPlatform {
		includeTags "unitTest"
	}
	mustRunAfter check
}

tasks.register("integrationTest", Test) {
	useJUnitPlatform {
		includeTags "integrationTest"
	}
	mustRunAfter check
}

test {
	useJUnitPlatform()
}

tasks.withType(Test) { testTask ->
	doFirst {
		def profile = 'h2'

		systemProperty 'spring.profiles.active', profile
		failFast = project.hasProperty("failFast")
	}

	testLogging { logging ->
		events TestLogEvent.FAILED, TestLogEvent.SKIPPED
		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces false
		showStandardStreams = false
	}

	def classNameTest = null
	def classNameTestActual = null

	afterTest { desc, result ->
		def className = "${desc.className}"
		def duration = TimeCategory.minus(new Date(result.endTime), new Date(result.startTime)).toString()
		classNameTestActual = className

		if (classNameTest != classNameTestActual) {
			classNameTest = classNameTestActual
			println('\n\n--> ' + classNameTest)
		}
		def methodName = "${desc.name}"
		def resultOfTest = "${result.resultType}"
		def timeOfExecution = "(${duration})"

		def mes = String.format("\n\t |%110s | %10s | %18s |", methodName, resultOfTest, timeOfExecution)

		if (resultOfTest == "SUCCESS") {
			printf(mes)
		} else {
			println(mes)
		}
	}

	afterSuite { desc, result ->
		if (!desc.parent) { // will match the outermost suite
			def reportFileName = "Report: file://${testTask.reports.html.entryPoint}"

			def output = "Results: ${result.resultType} (${result.testCount} tests, " +
					"${result.successfulTestCount} successes, " +
					"${result.failedTestCount} failures, " +
					"${result.skippedTestCount} skipped): " +
					"${TimeCategory.minus(new Date(result.endTime), new Date(result.startTime))}"
			def startItem = '|  ', endItem = '  |'

			def outputLength = startItem.length() + output.length() + endItem.length()
			def reportFileNameLength = startItem.length() + reportFileName.length() + endItem.length()

			print('\n' + ('-' * outputLength) +
					'\n' + startItem + output + endItem +
					'\n' + ('-' * outputLength))

			println('\n' + ('-' * reportFileNameLength) +
					"\n" + startItem + reportFileName + endItem +
					'\n' + ('-' * reportFileNameLength))
		}
	}
}

springBoot {
	buildInfo()
}